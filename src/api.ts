/* tslint:disable */
/* eslint-disable */
/**
 * PPOTTO Social API
 * 뽀또 소셜서비스
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateShareAlbumFeedCommentRequest
 */
export interface CreateShareAlbumFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof CreateShareAlbumFeedCommentRequest
     */
    'userId': number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof CreateShareAlbumFeedCommentRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumFeedCommentResponse
 */
export interface CreateShareAlbumFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof CreateShareAlbumFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumFeedItem
 */
export interface CreateShareAlbumFeedItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof CreateShareAlbumFeedItem
     */
    'contentId': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof CreateShareAlbumFeedItem
     */
    'type': CreateShareAlbumFeedItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateShareAlbumFeedItem
     */
    'contentSmallUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateShareAlbumFeedItem
     */
    'contentMediumUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateShareAlbumFeedItem
     */
    'contentLargeUrl'?: string;
}

export const CreateShareAlbumFeedItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type CreateShareAlbumFeedItemTypeEnum = typeof CreateShareAlbumFeedItemTypeEnum[keyof typeof CreateShareAlbumFeedItemTypeEnum];

/**
 * 
 * @export
 * @interface CreateShareAlbumFeedRequest
 */
export interface CreateShareAlbumFeedRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof CreateShareAlbumFeedRequest
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof CreateShareAlbumFeedRequest
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<CreateShareAlbumFeedItem>}
     * @memberof CreateShareAlbumFeedRequest
     */
    'contents': Array<CreateShareAlbumFeedItem>;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumFeedResponse
 */
export interface CreateShareAlbumFeedResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof CreateShareAlbumFeedResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumInviteCodeResponse
 */
export interface CreateShareAlbumInviteCodeResponse {
    /**
     * 생성된 초대 코드
     * @type {string}
     * @memberof CreateShareAlbumInviteCodeResponse
     */
    'inviteCode': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumRequest
 */
export interface CreateShareAlbumRequest {
    /**
     * 공유앨범 명
     * @type {string}
     * @memberof CreateShareAlbumRequest
     */
    'name': string;
    /**
     * 공유앨범 설명
     * @type {string}
     * @memberof CreateShareAlbumRequest
     */
    'bio': string;
    /**
     * 공유앨범 생성자의 아이디
     * @type {number}
     * @memberof CreateShareAlbumRequest
     */
    'ownerId': number;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumResponse
 */
export interface CreateShareAlbumResponse {
    /**
     * 생성된 공유앨범의 아이디
     * @type {string}
     * @memberof CreateShareAlbumResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DeleteShareAlbumFeedCommentRequest
 */
export interface DeleteShareAlbumFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof DeleteShareAlbumFeedCommentRequest
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface DeleteShareAlbumFeedCommentResponse
 */
export interface DeleteShareAlbumFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof DeleteShareAlbumFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface DeleteShareAlbumMemberResponse
 */
export interface DeleteShareAlbumMemberResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof DeleteShareAlbumMemberResponse
     */
    'albumId': string;
}
/**
 * 
 * @export
 * @interface GetShareAlbumFeedCommentItem
 */
export interface GetShareAlbumFeedCommentItem {
    /**
     * 코멘트 아이디
     * @type {string}
     * @memberof GetShareAlbumFeedCommentItem
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetShareAlbumFeedCommentItem
     */
    'userId': number;
    /**
     * 내용
     * @type {string}
     * @memberof GetShareAlbumFeedCommentItem
     */
    'description': string;
    /**
     * 생성일
     * @type {string}
     * @memberof GetShareAlbumFeedCommentItem
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface GetShareAlbumFeedContentItem
 */
export interface GetShareAlbumFeedContentItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof GetShareAlbumFeedContentItem
     */
    'id': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof GetShareAlbumFeedContentItem
     */
    'type': GetShareAlbumFeedContentItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedContentItem
     */
    'contentSmallUrl': string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedContentItem
     */
    'contentMediumUrl': string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedContentItem
     */
    'contentLargeUrl': string;
}

export const GetShareAlbumFeedContentItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type GetShareAlbumFeedContentItemTypeEnum = typeof GetShareAlbumFeedContentItemTypeEnum[keyof typeof GetShareAlbumFeedContentItemTypeEnum];

/**
 * 
 * @export
 * @interface GetShareAlbumFeedListContentItem
 */
export interface GetShareAlbumFeedListContentItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetShareAlbumFeedListContentItem
     */
    'id': string;
    /**
     * 피드 타입
     * @type {string}
     * @memberof GetShareAlbumFeedListContentItem
     */
    'type': GetShareAlbumFeedListContentItemTypeEnum;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedListContentItem
     */
    'contentSmallUrl': string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedListContentItem
     */
    'contentMediumUrl': string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetShareAlbumFeedListContentItem
     */
    'contentLargeUrl': string;
}

export const GetShareAlbumFeedListContentItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type GetShareAlbumFeedListContentItemTypeEnum = typeof GetShareAlbumFeedListContentItemTypeEnum[keyof typeof GetShareAlbumFeedListContentItemTypeEnum];

/**
 * 
 * @export
 * @interface GetShareAlbumFeedListItem
 */
export interface GetShareAlbumFeedListItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetShareAlbumFeedListItem
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetShareAlbumFeedListItem
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof GetShareAlbumFeedListItem
     */
    'description': string;
    /**
     * 피드 콘텐츠
     * @type {Array<GetShareAlbumFeedListContentItem>}
     * @memberof GetShareAlbumFeedListItem
     */
    'feedContentList': Array<GetShareAlbumFeedListContentItem>;
    /**
     * 생성일
     * @type {string}
     * @memberof GetShareAlbumFeedListItem
     */
    'createdAt': string;
    /**
     * 수정일
     * @type {string}
     * @memberof GetShareAlbumFeedListItem
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetShareAlbumFeedListResponse
 */
export interface GetShareAlbumFeedListResponse {
    /**
     * 토탈 카운트
     * @type {number}
     * @memberof GetShareAlbumFeedListResponse
     */
    'total': number;
    /**
     * 피드 리스트
     * @type {Array<GetShareAlbumFeedListItem>}
     * @memberof GetShareAlbumFeedListResponse
     */
    'list': Array<GetShareAlbumFeedListItem>;
}
/**
 * 
 * @export
 * @interface GetShareAlbumFeedResponse
 */
export interface GetShareAlbumFeedResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetShareAlbumFeedResponse
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetShareAlbumFeedResponse
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof GetShareAlbumFeedResponse
     */
    'description': string;
    /**
     * 피드 콘텐츠
     * @type {Array<GetShareAlbumFeedContentItem>}
     * @memberof GetShareAlbumFeedResponse
     */
    'feedContentList': Array<GetShareAlbumFeedContentItem>;
    /**
     * 피드 코멘트
     * @type {Array<GetShareAlbumFeedCommentItem>}
     * @memberof GetShareAlbumFeedResponse
     */
    'feedCommentList': Array<GetShareAlbumFeedCommentItem>;
    /**
     * 생성일
     * @type {string}
     * @memberof GetShareAlbumFeedResponse
     */
    'createdAt': string;
    /**
     * 수정일
     * @type {string}
     * @memberof GetShareAlbumFeedResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumMember
 */
export interface GetSharedAlbumMember {
    /**
     * 앨범 공유 멤버 아이디
     * @type {number}
     * @memberof GetSharedAlbumMember
     */
    'userId': number;
    /**
     * 권한
     * @type {string}
     * @memberof GetSharedAlbumMember
     */
    'role': GetSharedAlbumMemberRoleEnum;
    /**
     * 가입일
     * @type {string}
     * @memberof GetSharedAlbumMember
     */
    'joinedAt': string;
}

export const GetSharedAlbumMemberRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type GetSharedAlbumMemberRoleEnum = typeof GetSharedAlbumMemberRoleEnum[keyof typeof GetSharedAlbumMemberRoleEnum];

/**
 * 
 * @export
 * @interface GetSharedAlbumResponse
 */
export interface GetSharedAlbumResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'id': string;
    /**
     * 앨범 명
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'name': string;
    /**
     * 앨범 소개
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'bio': string;
    /**
     * 
     * @type {Array<GetSharedAlbumMember>}
     * @memberof GetSharedAlbumResponse
     */
    'shareAlbumMember': Array<GetSharedAlbumMember>;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumsAlbum
 */
export interface GetSharedAlbumsAlbum {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'id': string;
    /**
     * 앨범 명
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'name': string;
    /**
     * 앨범 소개
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'bio': string;
    /**
     * 
     * @type {Array<GetSharedAlbumsMember>}
     * @memberof GetSharedAlbumsAlbum
     */
    'shareAlbumMember': Array<GetSharedAlbumsMember>;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumsMember
 */
export interface GetSharedAlbumsMember {
    /**
     * 앨범 공유 멤버 아이디
     * @type {number}
     * @memberof GetSharedAlbumsMember
     */
    'userId': number;
    /**
     * 권한
     * @type {string}
     * @memberof GetSharedAlbumsMember
     */
    'role': GetSharedAlbumsMemberRoleEnum;
    /**
     * 가입일
     * @type {string}
     * @memberof GetSharedAlbumsMember
     */
    'joinedAt': string;
}

export const GetSharedAlbumsMemberRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type GetSharedAlbumsMemberRoleEnum = typeof GetSharedAlbumsMemberRoleEnum[keyof typeof GetSharedAlbumsMemberRoleEnum];

/**
 * 
 * @export
 * @interface GetSharedAlbumsResponse
 */
export interface GetSharedAlbumsResponse {
    /**
     * 앨범 리스트
     * @type {Array<GetSharedAlbumsAlbum>}
     * @memberof GetSharedAlbumsResponse
     */
    'list': Array<GetSharedAlbumsAlbum>;
}
/**
 * 
 * @export
 * @interface JoinShareAlbumByInviteCodeRequest
 */
export interface JoinShareAlbumByInviteCodeRequest {
    /**
     * 대상 유저 아이디
     * @type {number}
     * @memberof JoinShareAlbumByInviteCodeRequest
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface JoinShareAlbumByInviteCodeResponse
 */
export interface JoinShareAlbumByInviteCodeResponse {
    /**
     * 가입된 공유앨범 아이디
     * @type {string}
     * @memberof JoinShareAlbumByInviteCodeResponse
     */
    'shareAlbumId': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumFeedCommentRequest
 */
export interface ModifyShareAlbumFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof ModifyShareAlbumFeedCommentRequest
     */
    'userId': number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof ModifyShareAlbumFeedCommentRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumFeedCommentResponse
 */
export interface ModifyShareAlbumFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof ModifyShareAlbumFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumFeedItem
 */
export interface ModifyShareAlbumFeedItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof ModifyShareAlbumFeedItem
     */
    'contentId': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof ModifyShareAlbumFeedItem
     */
    'type': ModifyShareAlbumFeedItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyShareAlbumFeedItem
     */
    'contentSmallUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyShareAlbumFeedItem
     */
    'contentMediumUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyShareAlbumFeedItem
     */
    'contentLargeUrl'?: string;
}

export const ModifyShareAlbumFeedItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type ModifyShareAlbumFeedItemTypeEnum = typeof ModifyShareAlbumFeedItemTypeEnum[keyof typeof ModifyShareAlbumFeedItemTypeEnum];

/**
 * 
 * @export
 * @interface ModifyShareAlbumFeedRequest
 */
export interface ModifyShareAlbumFeedRequest {
    /**
     * 피드 내용
     * @type {string}
     * @memberof ModifyShareAlbumFeedRequest
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<ModifyShareAlbumFeedItem>}
     * @memberof ModifyShareAlbumFeedRequest
     */
    'contents'?: Array<ModifyShareAlbumFeedItem>;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumMemberRequest
 */
export interface ModifyShareAlbumMemberRequest {
    /**
     * 앨범 권한
     * @type {string}
     * @memberof ModifyShareAlbumMemberRequest
     */
    'role': ModifyShareAlbumMemberRequestRoleEnum;
}

export const ModifyShareAlbumMemberRequestRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type ModifyShareAlbumMemberRequestRoleEnum = typeof ModifyShareAlbumMemberRequestRoleEnum[keyof typeof ModifyShareAlbumMemberRequestRoleEnum];

/**
 * 
 * @export
 * @interface ModifyShareAlbumMemberResponse
 */
export interface ModifyShareAlbumMemberResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof ModifyShareAlbumMemberResponse
     */
    'albumId': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumRequest
 */
export interface ModifyShareAlbumRequest {
    /**
     * 공유앨범 명
     * @type {string}
     * @memberof ModifyShareAlbumRequest
     */
    'name': string;
    /**
     * 공유앨범 설명
     * @type {string}
     * @memberof ModifyShareAlbumRequest
     */
    'bio': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumResponse
 */
export interface ModifyShareAlbumResponse {
    /**
     * 수정된 공유앨범의 아이디
     * @type {string}
     * @memberof ModifyShareAlbumResponse
     */
    'id': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbum: async (createShareAlbumRequest: CreateShareAlbumRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createShareAlbumRequest' is not null or undefined
            assertParamExists('shareAlbumControllerCreateShareAlbum', 'createShareAlbumRequest', createShareAlbumRequest)
            const localVarPath = `/share-album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShareAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbumInviteCode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerCreateShareAlbumInviteCode', 'id', id)
            const localVarPath = `/share-album/{id}/invite-code`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbum: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerGetShareAlbum', 'id', id)
            const localVarPath = `/share-album/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbums: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerGetShareAlbums', 'userId', userId)
            const localVarPath = `/share-album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerJoinShareAlbumByInviteCode: async (code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shareAlbumControllerJoinShareAlbumByInviteCode', 'code', code)
            // verify required parameter 'joinShareAlbumByInviteCodeRequest' is not null or undefined
            assertParamExists('shareAlbumControllerJoinShareAlbumByInviteCode', 'joinShareAlbumByInviteCodeRequest', joinShareAlbumByInviteCodeRequest)
            const localVarPath = `/share-album/invite-code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinShareAlbumByInviteCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerLeaveShareAlbum: async (id: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerLeaveShareAlbum', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerLeaveShareAlbum', 'userId', userId)
            const localVarPath = `/share-album/{id}/member/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbum: async (id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbum', 'id', id)
            // verify required parameter 'modifyShareAlbumRequest' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbum', 'modifyShareAlbumRequest', modifyShareAlbumRequest)
            const localVarPath = `/share-album/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbumMember: async (id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'userId', userId)
            // verify required parameter 'modifyShareAlbumMemberRequest' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'modifyShareAlbumMemberRequest', modifyShareAlbumMemberRequest)
            const localVarPath = `/share-album/{id}/member/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateShareAlbumFeedCommentRequest} createShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerCreateComment: async (feedId: string, createShareAlbumFeedCommentRequest: CreateShareAlbumFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerCreateComment', 'feedId', feedId)
            // verify required parameter 'createShareAlbumFeedCommentRequest' is not null or undefined
            assertParamExists('shareAlbumFeedControllerCreateComment', 'createShareAlbumFeedCommentRequest', createShareAlbumFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShareAlbumFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateShareAlbumFeedRequest} createShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerCreateFeed: async (id: string, createShareAlbumFeedRequest: CreateShareAlbumFeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumFeedControllerCreateFeed', 'id', id)
            // verify required parameter 'createShareAlbumFeedRequest' is not null or undefined
            assertParamExists('shareAlbumFeedControllerCreateFeed', 'createShareAlbumFeedRequest', createShareAlbumFeedRequest)
            const localVarPath = `/share-album/{id}/feed`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShareAlbumFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteShareAlbumFeedCommentRequest} deleteShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerDeleteComment: async (feedId: string, commentId: string, deleteShareAlbumFeedCommentRequest: DeleteShareAlbumFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerDeleteComment', 'feedId', feedId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerDeleteComment', 'commentId', commentId)
            // verify required parameter 'deleteShareAlbumFeedCommentRequest' is not null or undefined
            assertParamExists('shareAlbumFeedControllerDeleteComment', 'deleteShareAlbumFeedCommentRequest', deleteShareAlbumFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment/{commentId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteShareAlbumFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerDeleteFeed: async (id: string, feedId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumFeedControllerDeleteFeed', 'id', id)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerDeleteFeed', 'feedId', feedId)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerGetFeed: async (feedId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerGetFeed', 'feedId', feedId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumFeedControllerGetFeed', 'id', id)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerGetFeedList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumFeedControllerGetFeedList', 'id', id)
            const localVarPath = `/share-album/{id}/feed`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyShareAlbumFeedCommentRequest} modifyShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerUpdateComment: async (feedId: string, commentId: string, modifyShareAlbumFeedCommentRequest: ModifyShareAlbumFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateComment', 'feedId', feedId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateComment', 'commentId', commentId)
            // verify required parameter 'modifyShareAlbumFeedCommentRequest' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateComment', 'modifyShareAlbumFeedCommentRequest', modifyShareAlbumFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment/{commentId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyShareAlbumFeedRequest} modifyShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerUpdateFeed: async (id: string, feedId: string, modifyShareAlbumFeedRequest: ModifyShareAlbumFeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateFeed', 'id', id)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateFeed', 'feedId', feedId)
            // verify required parameter 'modifyShareAlbumFeedRequest' is not null or undefined
            assertParamExists('shareAlbumFeedControllerUpdateFeed', 'modifyShareAlbumFeedRequest', modifyShareAlbumFeedRequest)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumInviteCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerCreateShareAlbumInviteCode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerGetShareAlbum(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSharedAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerGetShareAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerGetShareAlbums(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSharedAlbumsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerGetShareAlbums(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinShareAlbumByInviteCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteShareAlbumMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerLeaveShareAlbum(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyShareAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyShareAlbumMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateShareAlbumFeedCommentRequest} createShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerCreateComment(feedId: string, createShareAlbumFeedCommentRequest: CreateShareAlbumFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerCreateComment(feedId, createShareAlbumFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateShareAlbumFeedRequest} createShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerCreateFeed(id: string, createShareAlbumFeedRequest: CreateShareAlbumFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerCreateFeed(id, createShareAlbumFeedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteShareAlbumFeedCommentRequest} deleteShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerDeleteComment(feedId: string, commentId: string, deleteShareAlbumFeedCommentRequest: DeleteShareAlbumFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteShareAlbumFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerDeleteComment(feedId, commentId, deleteShareAlbumFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerDeleteFeed(id: string, feedId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerDeleteFeed(id, feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerGetFeed(feedId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShareAlbumFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerGetFeed(feedId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerGetFeedList(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShareAlbumFeedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerGetFeedList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyShareAlbumFeedCommentRequest} modifyShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerUpdateComment(feedId: string, commentId: string, modifyShareAlbumFeedCommentRequest: ModifyShareAlbumFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyShareAlbumFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerUpdateComment(feedId, commentId, modifyShareAlbumFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyShareAlbumFeedRequest} modifyShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumFeedControllerUpdateFeed(id: string, feedId: string, modifyShareAlbumFeedRequest: ModifyShareAlbumFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumFeedControllerUpdateFeed(id, feedId, modifyShareAlbumFeedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: any): AxiosPromise<CreateShareAlbumResponse> {
            return localVarFp.shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: any): AxiosPromise<CreateShareAlbumInviteCodeResponse> {
            return localVarFp.shareAlbumControllerCreateShareAlbumInviteCode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbum(id: string, options?: any): AxiosPromise<GetSharedAlbumResponse> {
            return localVarFp.shareAlbumControllerGetShareAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbums(userId: number, options?: any): AxiosPromise<GetSharedAlbumsResponse> {
            return localVarFp.shareAlbumControllerGetShareAlbums(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: any): AxiosPromise<JoinShareAlbumByInviteCodeResponse> {
            return localVarFp.shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: any): AxiosPromise<DeleteShareAlbumMemberResponse> {
            return localVarFp.shareAlbumControllerLeaveShareAlbum(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: any): AxiosPromise<ModifyShareAlbumResponse> {
            return localVarFp.shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: any): AxiosPromise<ModifyShareAlbumMemberResponse> {
            return localVarFp.shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateShareAlbumFeedCommentRequest} createShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerCreateComment(feedId: string, createShareAlbumFeedCommentRequest: CreateShareAlbumFeedCommentRequest, options?: any): AxiosPromise<CreateShareAlbumFeedCommentResponse> {
            return localVarFp.shareAlbumFeedControllerCreateComment(feedId, createShareAlbumFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateShareAlbumFeedRequest} createShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerCreateFeed(id: string, createShareAlbumFeedRequest: CreateShareAlbumFeedRequest, options?: any): AxiosPromise<CreateShareAlbumFeedResponse> {
            return localVarFp.shareAlbumFeedControllerCreateFeed(id, createShareAlbumFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteShareAlbumFeedCommentRequest} deleteShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerDeleteComment(feedId: string, commentId: string, deleteShareAlbumFeedCommentRequest: DeleteShareAlbumFeedCommentRequest, options?: any): AxiosPromise<DeleteShareAlbumFeedCommentResponse> {
            return localVarFp.shareAlbumFeedControllerDeleteComment(feedId, commentId, deleteShareAlbumFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerDeleteFeed(id: string, feedId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.shareAlbumFeedControllerDeleteFeed(id, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerGetFeed(feedId: string, id: string, options?: any): AxiosPromise<GetShareAlbumFeedResponse> {
            return localVarFp.shareAlbumFeedControllerGetFeed(feedId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerGetFeedList(id: string, options?: any): AxiosPromise<GetShareAlbumFeedListResponse> {
            return localVarFp.shareAlbumFeedControllerGetFeedList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyShareAlbumFeedCommentRequest} modifyShareAlbumFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerUpdateComment(feedId: string, commentId: string, modifyShareAlbumFeedCommentRequest: ModifyShareAlbumFeedCommentRequest, options?: any): AxiosPromise<ModifyShareAlbumFeedCommentResponse> {
            return localVarFp.shareAlbumFeedControllerUpdateComment(feedId, commentId, modifyShareAlbumFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyShareAlbumFeedRequest} modifyShareAlbumFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumFeedControllerUpdateFeed(id: string, feedId: string, modifyShareAlbumFeedRequest: ModifyShareAlbumFeedRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.shareAlbumFeedControllerUpdateFeed(id, feedId, modifyShareAlbumFeedRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 공유앨범을 생성합니다.
     * @summary 공유앨범 생성
     * @param {CreateShareAlbumRequest} createShareAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 초대코드를 생성합니다.
     * @summary 공유앨범 초대코드 생성
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerCreateShareAlbumInviteCode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범을 조회합니다.
     * @summary 공유앨범 조회
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerGetShareAlbum(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerGetShareAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 리스트를 조회합니다.
     * @summary 공유앨범 리스트 조회
     * @param {number} userId 유저 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerGetShareAlbums(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerGetShareAlbums(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 초대코드로 공유앨범에 가입합니다.
     * @summary 공유앨범 초대코드로 공유앨범 가입
     * @param {string} code 공유앨범 초대코드
     * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 맴버를 삭제합니다.
     * @summary 공유앨범 맴버 삭제
     * @param {string} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerLeaveShareAlbum(id, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범을 수정합니다.
     * @summary 공유앨범 수정
     * @param {string} id 
     * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 맴버를 수정합니다.
     * @summary 공유앨범 맴버 수정
     * @param {string} id 
     * @param {number} userId 
     * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 생성합니다.
     * @summary 공유앨범 피드 댓글 생성
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {CreateShareAlbumFeedCommentRequest} createShareAlbumFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerCreateComment(feedId: string, createShareAlbumFeedCommentRequest: CreateShareAlbumFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerCreateComment(feedId, createShareAlbumFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 생성합니다.
     * @summary 공유앨범 피드 생성
     * @param {string} id 공유앨범 아이디
     * @param {CreateShareAlbumFeedRequest} createShareAlbumFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerCreateFeed(id: string, createShareAlbumFeedRequest: CreateShareAlbumFeedRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerCreateFeed(id, createShareAlbumFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 삭제합니다.
     * @summary 공유앨범 피드 댓글 삭제
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} commentId 공유앨범 피드 댓글 아이디
     * @param {DeleteShareAlbumFeedCommentRequest} deleteShareAlbumFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerDeleteComment(feedId: string, commentId: string, deleteShareAlbumFeedCommentRequest: DeleteShareAlbumFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerDeleteComment(feedId, commentId, deleteShareAlbumFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 삭제합니다.
     * @summary 공유앨범 피드 삭제
     * @param {string} id 공유앨범 아이디
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerDeleteFeed(id: string, feedId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerDeleteFeed(id, feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 가져옵니다.
     * @summary 공유앨범 피드
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} id 공유앨범 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerGetFeed(feedId: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerGetFeed(feedId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 리스트를 가져옵니다.
     * @summary 공유앨범 피드 리스트
     * @param {string} id 공유앨범 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerGetFeedList(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerGetFeedList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 수정합니다.
     * @summary 공유앨범 피드 댓글 수정
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} commentId 공유앨범 피드 댓글 아이디
     * @param {ModifyShareAlbumFeedCommentRequest} modifyShareAlbumFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerUpdateComment(feedId: string, commentId: string, modifyShareAlbumFeedCommentRequest: ModifyShareAlbumFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerUpdateComment(feedId, commentId, modifyShareAlbumFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 수정합니다.
     * @summary 공유앨범 피드 수정
     * @param {string} id 공유앨범 아이디
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {ModifyShareAlbumFeedRequest} modifyShareAlbumFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumFeedControllerUpdateFeed(id: string, feedId: string, modifyShareAlbumFeedRequest: ModifyShareAlbumFeedRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumFeedControllerUpdateFeed(id, feedId, modifyShareAlbumFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



