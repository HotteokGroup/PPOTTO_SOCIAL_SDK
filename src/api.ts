/* tslint:disable */
/* eslint-disable */
/**
 * PPOTTO Social API
 * 뽀또 소셜서비스
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AddFeedToCollectionRequest
 */
export interface AddFeedToCollectionRequest {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof AddFeedToCollectionRequest
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface AddFeedToCollectionResponse
 */
export interface AddFeedToCollectionResponse {
    /**
     * 컬렉션 아이디
     * @type {string}
     * @memberof AddFeedToCollectionResponse
     */
    'collectionId': string;
}
/**
 * 
 * @export
 * @interface CreateCollectionRequest
 */
export interface CreateCollectionRequest {
    /**
     * 회원 아이디
     * @type {number}
     * @memberof CreateCollectionRequest
     */
    'userId': number;
    /**
     * 컬렉션명
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'name': string;
    /**
     * 컬렉션 설명
     * @type {string}
     * @memberof CreateCollectionRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface CreateCollectionResponse
 */
export interface CreateCollectionResponse {
    /**
     * 컬렉션 아이디
     * @type {string}
     * @memberof CreateCollectionResponse
     */
    'collectionId': string;
}
/**
 * 
 * @export
 * @interface CreateFeedCommentRequest
 */
export interface CreateFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof CreateFeedCommentRequest
     */
    'userId': number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof CreateFeedCommentRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface CreateFeedCommentResponse
 */
export interface CreateFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof CreateFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface CreateFeedItem
 */
export interface CreateFeedItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof CreateFeedItem
     */
    'contentId': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof CreateFeedItem
     */
    'type': CreateFeedItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateFeedItem
     */
    'contentSmallUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateFeedItem
     */
    'contentMediumUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof CreateFeedItem
     */
    'contentLargeUrl'?: string;
}

export const CreateFeedItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type CreateFeedItemTypeEnum = typeof CreateFeedItemTypeEnum[keyof typeof CreateFeedItemTypeEnum];

/**
 * 
 * @export
 * @interface CreateFeedRequest
 */
export interface CreateFeedRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof CreateFeedRequest
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof CreateFeedRequest
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<CreateFeedItem>}
     * @memberof CreateFeedRequest
     */
    'contents': Array<CreateFeedItem>;
}
/**
 * 
 * @export
 * @interface CreateFeedResponse
 */
export interface CreateFeedResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof CreateFeedResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumInviteCodeResponse
 */
export interface CreateShareAlbumInviteCodeResponse {
    /**
     * 생성된 초대 코드
     * @type {string}
     * @memberof CreateShareAlbumInviteCodeResponse
     */
    'inviteCode': string;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumRequest
 */
export interface CreateShareAlbumRequest {
    /**
     * 공유앨범 명
     * @type {string}
     * @memberof CreateShareAlbumRequest
     */
    'name': string;
    /**
     * 공유앨범 설명
     * @type {string}
     * @memberof CreateShareAlbumRequest
     */
    'bio'?: string;
    /**
     * 공유앨범 생성자의 아이디
     * @type {number}
     * @memberof CreateShareAlbumRequest
     */
    'ownerId': number;
}
/**
 * 
 * @export
 * @interface CreateShareAlbumResponse
 */
export interface CreateShareAlbumResponse {
    /**
     * 생성된 공유앨범의 아이디
     * @type {string}
     * @memberof CreateShareAlbumResponse
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface DeleteCollectionResponse
 */
export interface DeleteCollectionResponse {
    /**
     * 삭제된 컬렉션 아이디
     * @type {string}
     * @memberof DeleteCollectionResponse
     */
    'collectionId': string;
}
/**
 * 
 * @export
 * @interface DeleteFeedCommentRequest
 */
export interface DeleteFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof DeleteFeedCommentRequest
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface DeleteFeedCommentResponse
 */
export interface DeleteFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof DeleteFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface DeleteFeedToCollectionResponse
 */
export interface DeleteFeedToCollectionResponse {
    /**
     * 컬렉션 아이디
     * @type {string}
     * @memberof DeleteFeedToCollectionResponse
     */
    'collectionId': string;
}
/**
 * 
 * @export
 * @interface DeleteShareAlbumMemberResponse
 */
export interface DeleteShareAlbumMemberResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof DeleteShareAlbumMemberResponse
     */
    'albumId': string;
}
/**
 * 
 * @export
 * @interface GetCollectionFeedsContentItem
 */
export interface GetCollectionFeedsContentItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetCollectionFeedsContentItem
     */
    'id': string;
    /**
     * 피드 타입
     * @type {string}
     * @memberof GetCollectionFeedsContentItem
     */
    'type': GetCollectionFeedsContentItemTypeEnum;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetCollectionFeedsContentItem
     */
    'contentSmallUrl'?: string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetCollectionFeedsContentItem
     */
    'contentMediumUrl'?: string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetCollectionFeedsContentItem
     */
    'contentLargeUrl'?: string;
}

export const GetCollectionFeedsContentItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type GetCollectionFeedsContentItemTypeEnum = typeof GetCollectionFeedsContentItemTypeEnum[keyof typeof GetCollectionFeedsContentItemTypeEnum];

/**
 * 
 * @export
 * @interface GetCollectionFeedsItem
 */
export interface GetCollectionFeedsItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetCollectionFeedsItem
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetCollectionFeedsItem
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof GetCollectionFeedsItem
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<GetCollectionFeedsContentItem>}
     * @memberof GetCollectionFeedsItem
     */
    'contentList': Array<GetCollectionFeedsContentItem>;
    /**
     * 생성일
     * @type {string}
     * @memberof GetCollectionFeedsItem
     */
    'createdAt': string;
    /**
     * 수정일
     * @type {string}
     * @memberof GetCollectionFeedsItem
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetCollectionFeedsResponse
 */
export interface GetCollectionFeedsResponse {
    /**
     * 토탈 카운트
     * @type {number}
     * @memberof GetCollectionFeedsResponse
     */
    'total': number;
    /**
     * 피드 리스트
     * @type {Array<GetCollectionFeedsItem>}
     * @memberof GetCollectionFeedsResponse
     */
    'list': Array<GetCollectionFeedsItem>;
}
/**
 * 
 * @export
 * @interface GetCollectionsItem
 */
export interface GetCollectionsItem {
    /**
     * 컬렉션 아이디
     * @type {string}
     * @memberof GetCollectionsItem
     */
    'id': string;
    /**
     * 컬렉션 이름
     * @type {string}
     * @memberof GetCollectionsItem
     */
    'name': string;
    /**
     * 컬렉션 설명
     * @type {string}
     * @memberof GetCollectionsItem
     */
    'description'?: string;
    /**
     * 컬렉션 생성일
     * @type {string}
     * @memberof GetCollectionsItem
     */
    'createdAt': string;
    /**
     * 컬렉션 수정일
     * @type {string}
     * @memberof GetCollectionsItem
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetCollectionsResponse
 */
export interface GetCollectionsResponse {
    /**
     * 토탈 카운트
     * @type {number}
     * @memberof GetCollectionsResponse
     */
    'total': number;
    /**
     * 컬렉션 리스트
     * @type {Array<GetCollectionsItem>}
     * @memberof GetCollectionsResponse
     */
    'list': Array<GetCollectionsItem>;
}
/**
 * 
 * @export
 * @interface GetFeedCommentItem
 */
export interface GetFeedCommentItem {
    /**
     * 코멘트 아이디
     * @type {string}
     * @memberof GetFeedCommentItem
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetFeedCommentItem
     */
    'userId': number;
    /**
     * 내용
     * @type {string}
     * @memberof GetFeedCommentItem
     */
    'description': string;
    /**
     * 생성일
     * @type {string}
     * @memberof GetFeedCommentItem
     */
    'createdAt': string;
}
/**
 * 
 * @export
 * @interface GetFeedContentItem
 */
export interface GetFeedContentItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof GetFeedContentItem
     */
    'id': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof GetFeedContentItem
     */
    'type': GetFeedContentItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedContentItem
     */
    'contentSmallUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedContentItem
     */
    'contentMediumUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedContentItem
     */
    'contentLargeUrl'?: string;
}

export const GetFeedContentItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type GetFeedContentItemTypeEnum = typeof GetFeedContentItemTypeEnum[keyof typeof GetFeedContentItemTypeEnum];

/**
 * 
 * @export
 * @interface GetFeedListContentItem
 */
export interface GetFeedListContentItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetFeedListContentItem
     */
    'id': string;
    /**
     * 피드 타입
     * @type {string}
     * @memberof GetFeedListContentItem
     */
    'type': GetFeedListContentItemTypeEnum;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedListContentItem
     */
    'contentSmallUrl': string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedListContentItem
     */
    'contentMediumUrl': string;
    /**
     * 피드 콘텐츠 URL
     * @type {string}
     * @memberof GetFeedListContentItem
     */
    'contentLargeUrl': string;
}

export const GetFeedListContentItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type GetFeedListContentItemTypeEnum = typeof GetFeedListContentItemTypeEnum[keyof typeof GetFeedListContentItemTypeEnum];

/**
 * 
 * @export
 * @interface GetFeedListItem
 */
export interface GetFeedListItem {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetFeedListItem
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetFeedListItem
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof GetFeedListItem
     */
    'description': string;
    /**
     * 피드 콘텐츠
     * @type {Array<GetFeedListContentItem>}
     * @memberof GetFeedListItem
     */
    'contentList': Array<GetFeedListContentItem>;
    /**
     * 생성일
     * @type {string}
     * @memberof GetFeedListItem
     */
    'createdAt': string;
    /**
     * 수정일
     * @type {string}
     * @memberof GetFeedListItem
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetFeedListResponse
 */
export interface GetFeedListResponse {
    /**
     * 토탈 카운트
     * @type {number}
     * @memberof GetFeedListResponse
     */
    'total': number;
    /**
     * 피드 리스트
     * @type {Array<GetFeedListItem>}
     * @memberof GetFeedListResponse
     */
    'list': Array<GetFeedListItem>;
}
/**
 * 
 * @export
 * @interface GetFeedResponse
 */
export interface GetFeedResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof GetFeedResponse
     */
    'id': string;
    /**
     * 유저 아이디
     * @type {number}
     * @memberof GetFeedResponse
     */
    'userId': number;
    /**
     * 피드 내용
     * @type {string}
     * @memberof GetFeedResponse
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<GetFeedContentItem>}
     * @memberof GetFeedResponse
     */
    'contentList': Array<GetFeedContentItem>;
    /**
     * 피드 코멘트
     * @type {Array<GetFeedCommentItem>}
     * @memberof GetFeedResponse
     */
    'commentList': Array<GetFeedCommentItem>;
    /**
     * 생성일
     * @type {string}
     * @memberof GetFeedResponse
     */
    'createdAt': string;
    /**
     * 수정일
     * @type {string}
     * @memberof GetFeedResponse
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumMemberItem
 */
export interface GetSharedAlbumMemberItem {
    /**
     * 앨범 공유 멤버 아이디
     * @type {number}
     * @memberof GetSharedAlbumMemberItem
     */
    'userId': number;
    /**
     * 권한
     * @type {string}
     * @memberof GetSharedAlbumMemberItem
     */
    'role': GetSharedAlbumMemberItemRoleEnum;
    /**
     * 가입일
     * @type {string}
     * @memberof GetSharedAlbumMemberItem
     */
    'joinedAt': string;
}

export const GetSharedAlbumMemberItemRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type GetSharedAlbumMemberItemRoleEnum = typeof GetSharedAlbumMemberItemRoleEnum[keyof typeof GetSharedAlbumMemberItemRoleEnum];

/**
 * 
 * @export
 * @interface GetSharedAlbumResponse
 */
export interface GetSharedAlbumResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'id': string;
    /**
     * 앨범 명
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'name': string;
    /**
     * 앨범 소개
     * @type {string}
     * @memberof GetSharedAlbumResponse
     */
    'bio': string;
    /**
     * 
     * @type {Array<GetSharedAlbumMemberItem>}
     * @memberof GetSharedAlbumResponse
     */
    'shareAlbumMemberList': Array<GetSharedAlbumMemberItem>;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumsAlbum
 */
export interface GetSharedAlbumsAlbum {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'id': string;
    /**
     * 앨범 명
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'name': string;
    /**
     * 앨범 소개
     * @type {string}
     * @memberof GetSharedAlbumsAlbum
     */
    'bio': string;
    /**
     * 
     * @type {Array<GetSharedAlbumsMemberItem>}
     * @memberof GetSharedAlbumsAlbum
     */
    'shareAlbumMemberList': Array<GetSharedAlbumsMemberItem>;
}
/**
 * 
 * @export
 * @interface GetSharedAlbumsMemberItem
 */
export interface GetSharedAlbumsMemberItem {
    /**
     * 앨범 공유 멤버 아이디
     * @type {number}
     * @memberof GetSharedAlbumsMemberItem
     */
    'userId': number;
    /**
     * 권한
     * @type {string}
     * @memberof GetSharedAlbumsMemberItem
     */
    'role': GetSharedAlbumsMemberItemRoleEnum;
    /**
     * 가입일
     * @type {string}
     * @memberof GetSharedAlbumsMemberItem
     */
    'joinedAt': string;
}

export const GetSharedAlbumsMemberItemRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type GetSharedAlbumsMemberItemRoleEnum = typeof GetSharedAlbumsMemberItemRoleEnum[keyof typeof GetSharedAlbumsMemberItemRoleEnum];

/**
 * 
 * @export
 * @interface GetSharedAlbumsResponse
 */
export interface GetSharedAlbumsResponse {
    /**
     * 앨범 리스트
     * @type {Array<GetSharedAlbumsAlbum>}
     * @memberof GetSharedAlbumsResponse
     */
    'list': Array<GetSharedAlbumsAlbum>;
}
/**
 * 
 * @export
 * @interface JoinShareAlbumByInviteCodeRequest
 */
export interface JoinShareAlbumByInviteCodeRequest {
    /**
     * 대상 유저 아이디
     * @type {number}
     * @memberof JoinShareAlbumByInviteCodeRequest
     */
    'userId': number;
}
/**
 * 
 * @export
 * @interface JoinShareAlbumByInviteCodeResponse
 */
export interface JoinShareAlbumByInviteCodeResponse {
    /**
     * 가입된 공유앨범 아이디
     * @type {string}
     * @memberof JoinShareAlbumByInviteCodeResponse
     */
    'shareAlbumId': string;
}
/**
 * 
 * @export
 * @interface ModifyCollectionRequest
 */
export interface ModifyCollectionRequest {
    /**
     * 컬렉션 이름
     * @type {string}
     * @memberof ModifyCollectionRequest
     */
    'name'?: string;
    /**
     * 컬렉션 설명
     * @type {string}
     * @memberof ModifyCollectionRequest
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface ModifyCollectionResponse
 */
export interface ModifyCollectionResponse {
    /**
     * 수정된 컬렉션 아이디
     * @type {string}
     * @memberof ModifyCollectionResponse
     */
    'collectionId': string;
}
/**
 * 
 * @export
 * @interface ModifyFeedCommentRequest
 */
export interface ModifyFeedCommentRequest {
    /**
     * 유저 아이디
     * @type {number}
     * @memberof ModifyFeedCommentRequest
     */
    'userId': number;
    /**
     * 댓글 내용
     * @type {string}
     * @memberof ModifyFeedCommentRequest
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface ModifyFeedCommentResponse
 */
export interface ModifyFeedCommentResponse {
    /**
     * 피드 아이디
     * @type {string}
     * @memberof ModifyFeedCommentResponse
     */
    'feedId': string;
}
/**
 * 
 * @export
 * @interface ModifyFeedItem
 */
export interface ModifyFeedItem {
    /**
     * 콘텐츠 아이디
     * @type {string}
     * @memberof ModifyFeedItem
     */
    'contentId': string;
    /**
     * 콘텐츠 타입
     * @type {string}
     * @memberof ModifyFeedItem
     */
    'type': ModifyFeedItemTypeEnum;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyFeedItem
     */
    'contentSmallUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyFeedItem
     */
    'contentMediumUrl'?: string;
    /**
     * 콘텐츠 URL
     * @type {string}
     * @memberof ModifyFeedItem
     */
    'contentLargeUrl'?: string;
}

export const ModifyFeedItemTypeEnum = {
    Image: 'IMAGE',
    Video: 'VIDEO'
} as const;

export type ModifyFeedItemTypeEnum = typeof ModifyFeedItemTypeEnum[keyof typeof ModifyFeedItemTypeEnum];

/**
 * 
 * @export
 * @interface ModifyFeedRequest
 */
export interface ModifyFeedRequest {
    /**
     * 피드 내용
     * @type {string}
     * @memberof ModifyFeedRequest
     */
    'description'?: string;
    /**
     * 피드 콘텐츠
     * @type {Array<ModifyFeedItem>}
     * @memberof ModifyFeedRequest
     */
    'contents'?: Array<ModifyFeedItem>;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumMemberRequest
 */
export interface ModifyShareAlbumMemberRequest {
    /**
     * 앨범 권한
     * @type {string}
     * @memberof ModifyShareAlbumMemberRequest
     */
    'role': ModifyShareAlbumMemberRequestRoleEnum;
}

export const ModifyShareAlbumMemberRequestRoleEnum = {
    Owner: 'OWNER',
    Editor: 'EDITOR',
    Viewer: 'VIEWER',
    Temporary: 'TEMPORARY'
} as const;

export type ModifyShareAlbumMemberRequestRoleEnum = typeof ModifyShareAlbumMemberRequestRoleEnum[keyof typeof ModifyShareAlbumMemberRequestRoleEnum];

/**
 * 
 * @export
 * @interface ModifyShareAlbumMemberResponse
 */
export interface ModifyShareAlbumMemberResponse {
    /**
     * 앨범 아이디
     * @type {string}
     * @memberof ModifyShareAlbumMemberResponse
     */
    'albumId': string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumRequest
 */
export interface ModifyShareAlbumRequest {
    /**
     * 공유앨범 명
     * @type {string}
     * @memberof ModifyShareAlbumRequest
     */
    'name'?: string;
    /**
     * 공유앨범 설명
     * @type {string}
     * @memberof ModifyShareAlbumRequest
     */
    'bio'?: string;
}
/**
 * 
 * @export
 * @interface ModifyShareAlbumResponse
 */
export interface ModifyShareAlbumResponse {
    /**
     * 수정된 공유앨범의 아이디
     * @type {string}
     * @memberof ModifyShareAlbumResponse
     */
    'id': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 컬렉션에 피드를 추가합니다.
         * @summary 컬렉션에 피드 추가
         * @param {string} collectionId 컬렉션 아이디
         * @param {AddFeedToCollectionRequest} addFeedToCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerAddFeedToCollection: async (collectionId: string, addFeedToCollectionRequest: AddFeedToCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerAddFeedToCollection', 'collectionId', collectionId)
            // verify required parameter 'addFeedToCollectionRequest' is not null or undefined
            assertParamExists('collectionControllerAddFeedToCollection', 'addFeedToCollectionRequest', addFeedToCollectionRequest)
            const localVarPath = `/collection/{collectionId}/feed`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addFeedToCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션을 생성합니다.
         * @summary 컬렉션 생성
         * @param {CreateCollectionRequest} createCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerCreateCollection: async (createCollectionRequest: CreateCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCollectionRequest' is not null or undefined
            assertParamExists('collectionControllerCreateCollection', 'createCollectionRequest', createCollectionRequest)
            const localVarPath = `/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션을 삭제합니다.
         * @summary 컬렉션 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteCollection: async (collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerDeleteCollection', 'collectionId', collectionId)
            const localVarPath = `/collection/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션에 피드를 삭제합니다.
         * @summary 컬렉션에 피드 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {string} feedId 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteFeedToCollection: async (collectionId: string, feedId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerDeleteFeedToCollection', 'collectionId', collectionId)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('collectionControllerDeleteFeedToCollection', 'feedId', feedId)
            const localVarPath = `/collection/{collectionId}/feed/{feedId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션 피드 리스트를 조회합니다.
         * @summary 컬렉션 피드 리스트
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollectionFeeds: async (collectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerGetCollectionFeeds', 'collectionId', collectionId)
            const localVarPath = `/collection/{collectionId}/feed`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션 리스트를 조회합니다.
         * @summary 컬렉션 리스트
         * @param {number} userId 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollections: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('collectionControllerGetCollections', 'userId', userId)
            const localVarPath = `/collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 컬렉션을 수정합니다.
         * @summary 컬렉션 수정
         * @param {string} collectionId 컬렉션 아이디
         * @param {ModifyCollectionRequest} modifyCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerModifyCollection: async (collectionId: string, modifyCollectionRequest: ModifyCollectionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'collectionId' is not null or undefined
            assertParamExists('collectionControllerModifyCollection', 'collectionId', collectionId)
            // verify required parameter 'modifyCollectionRequest' is not null or undefined
            assertParamExists('collectionControllerModifyCollection', 'modifyCollectionRequest', modifyCollectionRequest)
            const localVarPath = `/collection/{collectionId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyCollectionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateFeedCommentRequest} createFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerCreateComment: async (feedId: string, createFeedCommentRequest: CreateFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerCreateComment', 'feedId', feedId)
            // verify required parameter 'createFeedCommentRequest' is not null or undefined
            assertParamExists('feedControllerCreateComment', 'createFeedCommentRequest', createFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerCreateFeed: async (id: string, createFeedRequest: CreateFeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedControllerCreateFeed', 'id', id)
            // verify required parameter 'createFeedRequest' is not null or undefined
            assertParamExists('feedControllerCreateFeed', 'createFeedRequest', createFeedRequest)
            const localVarPath = `/share-album/{id}/feed`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteFeedCommentRequest} deleteFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerDeleteComment: async (feedId: string, commentId: string, deleteFeedCommentRequest: DeleteFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerDeleteComment', 'feedId', feedId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('feedControllerDeleteComment', 'commentId', commentId)
            // verify required parameter 'deleteFeedCommentRequest' is not null or undefined
            assertParamExists('feedControllerDeleteComment', 'deleteFeedCommentRequest', deleteFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment/{commentId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerDeleteFeed: async (id: string, feedId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedControllerDeleteFeed', 'id', id)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerDeleteFeed', 'feedId', feedId)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeed: async (feedId: string, id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerGetFeed', 'feedId', feedId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedControllerGetFeed', 'id', id)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeedList: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedControllerGetFeedList', 'id', id)
            const localVarPath = `/share-album/{id}/feed`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyFeedCommentRequest} modifyFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerUpdateComment: async (feedId: string, commentId: string, modifyFeedCommentRequest: ModifyFeedCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerUpdateComment', 'feedId', feedId)
            // verify required parameter 'commentId' is not null or undefined
            assertParamExists('feedControllerUpdateComment', 'commentId', commentId)
            // verify required parameter 'modifyFeedCommentRequest' is not null or undefined
            assertParamExists('feedControllerUpdateComment', 'modifyFeedCommentRequest', modifyFeedCommentRequest)
            const localVarPath = `/share-album/feed/{feedId}/comment/{commentId}`
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)))
                .replace(`{${"commentId"}}`, encodeURIComponent(String(commentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyFeedCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyFeedRequest} modifyFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerUpdateFeed: async (id: string, feedId: string, modifyFeedRequest: ModifyFeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('feedControllerUpdateFeed', 'id', id)
            // verify required parameter 'feedId' is not null or undefined
            assertParamExists('feedControllerUpdateFeed', 'feedId', feedId)
            // verify required parameter 'modifyFeedRequest' is not null or undefined
            assertParamExists('feedControllerUpdateFeed', 'modifyFeedRequest', modifyFeedRequest)
            const localVarPath = `/share-album/{id}/feed/{feedId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"feedId"}}`, encodeURIComponent(String(feedId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyFeedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbum: async (createShareAlbumRequest: CreateShareAlbumRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createShareAlbumRequest' is not null or undefined
            assertParamExists('shareAlbumControllerCreateShareAlbum', 'createShareAlbumRequest', createShareAlbumRequest)
            const localVarPath = `/share-album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createShareAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbumInviteCode: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerCreateShareAlbumInviteCode', 'id', id)
            const localVarPath = `/share-album/{id}/invite-code`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbum: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerGetShareAlbum', 'id', id)
            const localVarPath = `/share-album/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbums: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerGetShareAlbums', 'userId', userId)
            const localVarPath = `/share-album`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerJoinShareAlbumByInviteCode: async (code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('shareAlbumControllerJoinShareAlbumByInviteCode', 'code', code)
            // verify required parameter 'joinShareAlbumByInviteCodeRequest' is not null or undefined
            assertParamExists('shareAlbumControllerJoinShareAlbumByInviteCode', 'joinShareAlbumByInviteCodeRequest', joinShareAlbumByInviteCodeRequest)
            const localVarPath = `/share-album/invite-code/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(joinShareAlbumByInviteCodeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerLeaveShareAlbum: async (id: string, userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerLeaveShareAlbum', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerLeaveShareAlbum', 'userId', userId)
            const localVarPath = `/share-album/{id}/member/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbum: async (id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbum', 'id', id)
            // verify required parameter 'modifyShareAlbumRequest' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbum', 'modifyShareAlbumRequest', modifyShareAlbumRequest)
            const localVarPath = `/share-album/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbumMember: async (id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'id', id)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'userId', userId)
            // verify required parameter 'modifyShareAlbumMemberRequest' is not null or undefined
            assertParamExists('shareAlbumControllerModifyShareAlbumMember', 'modifyShareAlbumMemberRequest', modifyShareAlbumMemberRequest)
            const localVarPath = `/share-album/{id}/member/{userId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyShareAlbumMemberRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 컬렉션에 피드를 추가합니다.
         * @summary 컬렉션에 피드 추가
         * @param {string} collectionId 컬렉션 아이디
         * @param {AddFeedToCollectionRequest} addFeedToCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerAddFeedToCollection(collectionId: string, addFeedToCollectionRequest: AddFeedToCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddFeedToCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerAddFeedToCollection(collectionId, addFeedToCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션을 생성합니다.
         * @summary 컬렉션 생성
         * @param {CreateCollectionRequest} createCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerCreateCollection(createCollectionRequest: CreateCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerCreateCollection(createCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션을 삭제합니다.
         * @summary 컬렉션 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerDeleteCollection(collectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerDeleteCollection(collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션에 피드를 삭제합니다.
         * @summary 컬렉션에 피드 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {string} feedId 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerDeleteFeedToCollection(collectionId: string, feedId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFeedToCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerDeleteFeedToCollection(collectionId, feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션 피드 리스트를 조회합니다.
         * @summary 컬렉션 피드 리스트
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerGetCollectionFeeds(collectionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCollectionFeedsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerGetCollectionFeeds(collectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션 리스트를 조회합니다.
         * @summary 컬렉션 리스트
         * @param {number} userId 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerGetCollections(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCollectionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerGetCollections(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 컬렉션을 수정합니다.
         * @summary 컬렉션 수정
         * @param {string} collectionId 컬렉션 아이디
         * @param {ModifyCollectionRequest} modifyCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionControllerModifyCollection(collectionId: string, modifyCollectionRequest: ModifyCollectionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyCollectionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectionControllerModifyCollection(collectionId, modifyCollectionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateFeedCommentRequest} createFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerCreateComment(feedId: string, createFeedCommentRequest: CreateFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerCreateComment(feedId, createFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerCreateFeed(id: string, createFeedRequest: CreateFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerCreateFeed(id, createFeedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteFeedCommentRequest} deleteFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerDeleteComment(feedId: string, commentId: string, deleteFeedCommentRequest: DeleteFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerDeleteComment(feedId, commentId, deleteFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerDeleteFeed(id: string, feedId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerDeleteFeed(id, feedId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerGetFeed(feedId: string, id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerGetFeed(feedId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerGetFeedList(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeedListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerGetFeedList(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyFeedCommentRequest} modifyFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerUpdateComment(feedId: string, commentId: string, modifyFeedCommentRequest: ModifyFeedCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyFeedCommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerUpdateComment(feedId, commentId, modifyFeedCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyFeedRequest} modifyFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async feedControllerUpdateFeed(id: string, feedId: string, modifyFeedRequest: ModifyFeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.feedControllerUpdateFeed(id, feedId, modifyFeedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShareAlbumInviteCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerCreateShareAlbumInviteCode(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerGetShareAlbum(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSharedAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerGetShareAlbum(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerGetShareAlbums(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSharedAlbumsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerGetShareAlbums(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JoinShareAlbumByInviteCodeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteShareAlbumMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerLeaveShareAlbum(id, userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyShareAlbumResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModifyShareAlbumMemberResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 컬렉션에 피드를 추가합니다.
         * @summary 컬렉션에 피드 추가
         * @param {string} collectionId 컬렉션 아이디
         * @param {AddFeedToCollectionRequest} addFeedToCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerAddFeedToCollection(collectionId: string, addFeedToCollectionRequest: AddFeedToCollectionRequest, options?: any): AxiosPromise<AddFeedToCollectionResponse> {
            return localVarFp.collectionControllerAddFeedToCollection(collectionId, addFeedToCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션을 생성합니다.
         * @summary 컬렉션 생성
         * @param {CreateCollectionRequest} createCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerCreateCollection(createCollectionRequest: CreateCollectionRequest, options?: any): AxiosPromise<CreateCollectionResponse> {
            return localVarFp.collectionControllerCreateCollection(createCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션을 삭제합니다.
         * @summary 컬렉션 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteCollection(collectionId: string, options?: any): AxiosPromise<DeleteCollectionResponse> {
            return localVarFp.collectionControllerDeleteCollection(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션에 피드를 삭제합니다.
         * @summary 컬렉션에 피드 삭제
         * @param {string} collectionId 컬렉션 아이디
         * @param {string} feedId 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerDeleteFeedToCollection(collectionId: string, feedId: string, options?: any): AxiosPromise<DeleteFeedToCollectionResponse> {
            return localVarFp.collectionControllerDeleteFeedToCollection(collectionId, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션 피드 리스트를 조회합니다.
         * @summary 컬렉션 피드 리스트
         * @param {string} collectionId 컬렉션 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollectionFeeds(collectionId: string, options?: any): AxiosPromise<GetCollectionFeedsResponse> {
            return localVarFp.collectionControllerGetCollectionFeeds(collectionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션 리스트를 조회합니다.
         * @summary 컬렉션 리스트
         * @param {number} userId 고객 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerGetCollections(userId: number, options?: any): AxiosPromise<GetCollectionsResponse> {
            return localVarFp.collectionControllerGetCollections(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 컬렉션을 수정합니다.
         * @summary 컬렉션 수정
         * @param {string} collectionId 컬렉션 아이디
         * @param {ModifyCollectionRequest} modifyCollectionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionControllerModifyCollection(collectionId: string, modifyCollectionRequest: ModifyCollectionRequest, options?: any): AxiosPromise<ModifyCollectionResponse> {
            return localVarFp.collectionControllerModifyCollection(collectionId, modifyCollectionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 생성합니다.
         * @summary 공유앨범 피드 댓글 생성
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {CreateFeedCommentRequest} createFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerCreateComment(feedId: string, createFeedCommentRequest: CreateFeedCommentRequest, options?: any): AxiosPromise<CreateFeedCommentResponse> {
            return localVarFp.feedControllerCreateComment(feedId, createFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 생성합니다.
         * @summary 공유앨범 피드 생성
         * @param {string} id 공유앨범 아이디
         * @param {CreateFeedRequest} createFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerCreateFeed(id: string, createFeedRequest: CreateFeedRequest, options?: any): AxiosPromise<CreateFeedResponse> {
            return localVarFp.feedControllerCreateFeed(id, createFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 삭제합니다.
         * @summary 공유앨범 피드 댓글 삭제
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {DeleteFeedCommentRequest} deleteFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerDeleteComment(feedId: string, commentId: string, deleteFeedCommentRequest: DeleteFeedCommentRequest, options?: any): AxiosPromise<DeleteFeedCommentResponse> {
            return localVarFp.feedControllerDeleteComment(feedId, commentId, deleteFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 삭제합니다.
         * @summary 공유앨범 피드 삭제
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerDeleteFeed(id: string, feedId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.feedControllerDeleteFeed(id, feedId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 가져옵니다.
         * @summary 공유앨범 피드
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeed(feedId: string, id: string, options?: any): AxiosPromise<GetFeedResponse> {
            return localVarFp.feedControllerGetFeed(feedId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 리스트를 가져옵니다.
         * @summary 공유앨범 피드 리스트
         * @param {string} id 공유앨범 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerGetFeedList(id: string, options?: any): AxiosPromise<GetFeedListResponse> {
            return localVarFp.feedControllerGetFeedList(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드 댓글을 수정합니다.
         * @summary 공유앨범 피드 댓글 수정
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {string} commentId 공유앨범 피드 댓글 아이디
         * @param {ModifyFeedCommentRequest} modifyFeedCommentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerUpdateComment(feedId: string, commentId: string, modifyFeedCommentRequest: ModifyFeedCommentRequest, options?: any): AxiosPromise<ModifyFeedCommentResponse> {
            return localVarFp.feedControllerUpdateComment(feedId, commentId, modifyFeedCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 피드를 수정합니다.
         * @summary 공유앨범 피드 수정
         * @param {string} id 공유앨범 아이디
         * @param {string} feedId 공유앨범 피드 아이디
         * @param {ModifyFeedRequest} modifyFeedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        feedControllerUpdateFeed(id: string, feedId: string, modifyFeedRequest: ModifyFeedRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.feedControllerUpdateFeed(id, feedId, modifyFeedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범을 생성합니다.
         * @summary 공유앨범 생성
         * @param {CreateShareAlbumRequest} createShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: any): AxiosPromise<CreateShareAlbumResponse> {
            return localVarFp.shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 초대코드를 생성합니다.
         * @summary 공유앨범 초대코드 생성
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: any): AxiosPromise<CreateShareAlbumInviteCodeResponse> {
            return localVarFp.shareAlbumControllerCreateShareAlbumInviteCode(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범을 조회합니다.
         * @summary 공유앨범 조회
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbum(id: string, options?: any): AxiosPromise<GetSharedAlbumResponse> {
            return localVarFp.shareAlbumControllerGetShareAlbum(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 리스트를 조회합니다.
         * @summary 공유앨범 리스트 조회
         * @param {number} userId 유저 아이디
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerGetShareAlbums(userId: number, options?: any): AxiosPromise<GetSharedAlbumsResponse> {
            return localVarFp.shareAlbumControllerGetShareAlbums(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 초대코드로 공유앨범에 가입합니다.
         * @summary 공유앨범 초대코드로 공유앨범 가입
         * @param {string} code 공유앨범 초대코드
         * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: any): AxiosPromise<JoinShareAlbumByInviteCodeResponse> {
            return localVarFp.shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 맴버를 삭제합니다.
         * @summary 공유앨범 맴버 삭제
         * @param {string} id 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: any): AxiosPromise<DeleteShareAlbumMemberResponse> {
            return localVarFp.shareAlbumControllerLeaveShareAlbum(id, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범을 수정합니다.
         * @summary 공유앨범 수정
         * @param {string} id 
         * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: any): AxiosPromise<ModifyShareAlbumResponse> {
            return localVarFp.shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 공유앨범 맴버를 수정합니다.
         * @summary 공유앨범 맴버 수정
         * @param {string} id 
         * @param {number} userId 
         * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: any): AxiosPromise<ModifyShareAlbumMemberResponse> {
            return localVarFp.shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 컬렉션에 피드를 추가합니다.
     * @summary 컬렉션에 피드 추가
     * @param {string} collectionId 컬렉션 아이디
     * @param {AddFeedToCollectionRequest} addFeedToCollectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerAddFeedToCollection(collectionId: string, addFeedToCollectionRequest: AddFeedToCollectionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerAddFeedToCollection(collectionId, addFeedToCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션을 생성합니다.
     * @summary 컬렉션 생성
     * @param {CreateCollectionRequest} createCollectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerCreateCollection(createCollectionRequest: CreateCollectionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerCreateCollection(createCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션을 삭제합니다.
     * @summary 컬렉션 삭제
     * @param {string} collectionId 컬렉션 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerDeleteCollection(collectionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerDeleteCollection(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션에 피드를 삭제합니다.
     * @summary 컬렉션에 피드 삭제
     * @param {string} collectionId 컬렉션 아이디
     * @param {string} feedId 피드 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerDeleteFeedToCollection(collectionId: string, feedId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerDeleteFeedToCollection(collectionId, feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션 피드 리스트를 조회합니다.
     * @summary 컬렉션 피드 리스트
     * @param {string} collectionId 컬렉션 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerGetCollectionFeeds(collectionId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerGetCollectionFeeds(collectionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션 리스트를 조회합니다.
     * @summary 컬렉션 리스트
     * @param {number} userId 고객 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerGetCollections(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerGetCollections(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 컬렉션을 수정합니다.
     * @summary 컬렉션 수정
     * @param {string} collectionId 컬렉션 아이디
     * @param {ModifyCollectionRequest} modifyCollectionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public collectionControllerModifyCollection(collectionId: string, modifyCollectionRequest: ModifyCollectionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).collectionControllerModifyCollection(collectionId, modifyCollectionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 생성합니다.
     * @summary 공유앨범 피드 댓글 생성
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {CreateFeedCommentRequest} createFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerCreateComment(feedId: string, createFeedCommentRequest: CreateFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerCreateComment(feedId, createFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 생성합니다.
     * @summary 공유앨범 피드 생성
     * @param {string} id 공유앨범 아이디
     * @param {CreateFeedRequest} createFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerCreateFeed(id: string, createFeedRequest: CreateFeedRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerCreateFeed(id, createFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 삭제합니다.
     * @summary 공유앨범 피드 댓글 삭제
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} commentId 공유앨범 피드 댓글 아이디
     * @param {DeleteFeedCommentRequest} deleteFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerDeleteComment(feedId: string, commentId: string, deleteFeedCommentRequest: DeleteFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerDeleteComment(feedId, commentId, deleteFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 삭제합니다.
     * @summary 공유앨범 피드 삭제
     * @param {string} id 공유앨범 아이디
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerDeleteFeed(id: string, feedId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerDeleteFeed(id, feedId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 가져옵니다.
     * @summary 공유앨범 피드
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} id 공유앨범 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerGetFeed(feedId: string, id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerGetFeed(feedId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 리스트를 가져옵니다.
     * @summary 공유앨범 피드 리스트
     * @param {string} id 공유앨범 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerGetFeedList(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerGetFeedList(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드 댓글을 수정합니다.
     * @summary 공유앨범 피드 댓글 수정
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {string} commentId 공유앨범 피드 댓글 아이디
     * @param {ModifyFeedCommentRequest} modifyFeedCommentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerUpdateComment(feedId: string, commentId: string, modifyFeedCommentRequest: ModifyFeedCommentRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerUpdateComment(feedId, commentId, modifyFeedCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 피드를 수정합니다.
     * @summary 공유앨범 피드 수정
     * @param {string} id 공유앨범 아이디
     * @param {string} feedId 공유앨범 피드 아이디
     * @param {ModifyFeedRequest} modifyFeedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public feedControllerUpdateFeed(id: string, feedId: string, modifyFeedRequest: ModifyFeedRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).feedControllerUpdateFeed(id, feedId, modifyFeedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범을 생성합니다.
     * @summary 공유앨범 생성
     * @param {CreateShareAlbumRequest} createShareAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerCreateShareAlbum(createShareAlbumRequest: CreateShareAlbumRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerCreateShareAlbum(createShareAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 초대코드를 생성합니다.
     * @summary 공유앨범 초대코드 생성
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerCreateShareAlbumInviteCode(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerCreateShareAlbumInviteCode(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범을 조회합니다.
     * @summary 공유앨범 조회
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerGetShareAlbum(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerGetShareAlbum(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 리스트를 조회합니다.
     * @summary 공유앨범 리스트 조회
     * @param {number} userId 유저 아이디
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerGetShareAlbums(userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerGetShareAlbums(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 초대코드로 공유앨범에 가입합니다.
     * @summary 공유앨범 초대코드로 공유앨범 가입
     * @param {string} code 공유앨범 초대코드
     * @param {JoinShareAlbumByInviteCodeRequest} joinShareAlbumByInviteCodeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerJoinShareAlbumByInviteCode(code: string, joinShareAlbumByInviteCodeRequest: JoinShareAlbumByInviteCodeRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerJoinShareAlbumByInviteCode(code, joinShareAlbumByInviteCodeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 맴버를 삭제합니다.
     * @summary 공유앨범 맴버 삭제
     * @param {string} id 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerLeaveShareAlbum(id: string, userId: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerLeaveShareAlbum(id, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범을 수정합니다.
     * @summary 공유앨범 수정
     * @param {string} id 
     * @param {ModifyShareAlbumRequest} modifyShareAlbumRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerModifyShareAlbum(id: string, modifyShareAlbumRequest: ModifyShareAlbumRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerModifyShareAlbum(id, modifyShareAlbumRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 공유앨범 맴버를 수정합니다.
     * @summary 공유앨범 맴버 수정
     * @param {string} id 
     * @param {number} userId 
     * @param {ModifyShareAlbumMemberRequest} modifyShareAlbumMemberRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public shareAlbumControllerModifyShareAlbumMember(id: string, userId: number, modifyShareAlbumMemberRequest: ModifyShareAlbumMemberRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).shareAlbumControllerModifyShareAlbumMember(id, userId, modifyShareAlbumMemberRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * HealthApi - axios parameter creator
 * @export
 */
export const HealthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HealthApi - functional programming interface
 * @export
 */
export const HealthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HealthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HealthApi - factory interface
 * @export
 */
export const HealthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HealthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * HealthApi - object-oriented interface
 * @export
 * @class HealthApi
 * @extends {BaseAPI}
 */
export class HealthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HealthApi
     */
    public appControllerGetHello(options?: AxiosRequestConfig) {
        return HealthApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }
}



